@using LivingMessiah.Web.Enums
@using LivingMessiah.Web.Shared.Header.Enums;
@using LivingMessiah.Web.Shared.Header.Store
@using LivingMessiah.Web.Stores;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject  IState<ToolbarState>? ToolbarState
@inject IDispatcher? Dispatcher

<BlazoredTypeahead SearchMethod="SearchBibleBooks"
                   TValue="BibleBook"
                   TItem="BibleBook"
                   Value="SelectedBook"
                   ValueChanged="SelectedResultChanged" 
                   ValueExpression="@(() => SelectedBook)"
									 EnableDropDown="true"
									 MaximumSuggestions="66"
									 MinimumLength="2"
									 placeholder="Search bible...">
	<SelectedTemplate Context="mycontext">
		@mycontext.Title &nbsp;&nbsp;&nbsp; <span class="hebrew.sm">@mycontext.NameInHebrew</span>
	</SelectedTemplate>
	<HelpTemplate>
		Please enter at least 2 characters to perform a search.
	</HelpTemplate>
	<ResultTemplate Context="mycontext">
		@mycontext.Title <i class="text-black-50">@mycontext.TransliterationInHebrew</i>
	</ResultTemplate>
</BlazoredTypeahead>

@code {

	private async Task<IEnumerable<BibleBook>> SearchBibleBooks(string searchText)
	{
		return await Task.FromResult(BibleBook.List
			.Where(x => x.Title.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.Value));
	}
	private BibleBook? SelectedBook { get; set; }

	private async Task SelectedResultChanged(BibleBook result)
	{
		if (ToolbarState!.Value.BibleWebsite is null)
		{
			var action1 = new SetBibleWebsiteAction(BibleWebsite.MyHebrewBible);
			Dispatcher!.Dispatch(action1);
		}

		await Task.Delay(0);  // ToDo: can I do this without async/await ?
		SelectedBook = result;
		var action2 = new SetBibleBookAction(result);
		Dispatcher!.Dispatch(action2);
	}

}