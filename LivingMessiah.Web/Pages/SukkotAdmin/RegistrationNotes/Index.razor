@page "/SukkotAdmin/Notes/"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<State>? State

@using static LivingMessiah.Web.Services.Auth0
@using LivingMessiah.Web.Shared.Sukkot
@using LivingMessiah.Web.Pages.SukkotAdmin.RegistrationNotes.Enums

<AuthorizeView Roles="@Roles.SukkotMenuBar">
	<SukkotAdminMenubar></SukkotAdminMenubar>
</AuthorizeView>

@using Page = LivingMessiah.Web.Links.Sukkot.Notes
<PageTitle>@Page.Title</PageTitle>


<AuthorizeView Roles="@Roles.AdminOrSukkot">
	<Authorized>

		<div class="d-print-none">
			<a class="btn btn-sm btn-default float-end" href="javascript:window.print()">
				<span class="fa fa-print"></span> Print
			</a>
		</div>

		<div class="pb-2 mt-4 mb-2 border-bottom">
			<h3> <span class="text-warning"><i class="fa fa-sticky-note"></i></span> @Page.Title</h3>
		</div>

		<div class="row">
			<div class="col-sm-6">
				<Typeahead SelectedNote="State!.Value.SelectedNote" />
			</div>
			<div class="col-sm-6">
				<FilterButtons OnFilterSelected="@ReturnedFilter" 
					ShowDetailCard=State!.Value.ShowDetailCard />
			</div>
		</div>

		@if (State!.Value.ShowDetailCard)
		{
			<DetailsCard SelectedNote="State!.Value.SelectedNote" />
		}
		else
		{
			<ListCard />
		}

	</Authorized>
	<NotAuthorized>
		<div class="card border-warning my-5">
			<div class="card-header">Not Authorized</div>
			<div class="card-body">
				<h5 class="">To view <b>@Page.Title</b> you need to be logged in.</h5>
				<LoginRedirectButton ReturnUrl="@Page.Index" />
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

<ToasterRegistrationNotes />

@code {

	protected override void OnInitialized()
	{ 
		// ToDo: this gets called regardless of if the user has proper authority
		// if claims.User == AdminOrSukkot then...
		Dispatcher!.Dispatch(new Initialize_List_Action());
		base.OnInitialized();
	}

	private async Task ReturnedFilter(Enums.NotesFilter filter)
	{
		await Task.Delay(0);
		Dispatcher!.Dispatch(new Set_CurrentFilter_Action(filter));
		Dispatcher!.Dispatch(new Set_ListFiltered_Action(filter));
	}

}