@using System.Linq
@using Microsoft.Extensions.Logging;

@inject ILogger<TypeaheadVM>? Logger
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<State>? State 

<div class="d-print-none">
	<EditForm class="d-flex my-2" Model="TypeaheadVM"
						OnValidSubmit="HandleFormSubmit">

		<BlazoredTypeahead SearchMethod="SearchNotes"
		@bind-Value="TypeaheadVM.SelectedNote"
											 EnableDropDown="true"
											 MaximumSuggestions="@MaxSug"
											 MinimumLength="@MinLen"
											 placeholder="Search name...">
			<SelectedTemplate Context="contextNotes">
				@contextNotes!.FirstName @contextNotes!.FamilyName
			</SelectedTemplate>
			<HelpTemplate>@HelpMsg</HelpTemplate>
			<ResultTemplate Context="contextNotes">
				@contextNotes.FirstName @contextNotes.FamilyName
			</ResultTemplate>
		</BlazoredTypeahead>
		<ValidationMessage For="@(() => TypeaheadVM.SelectedNote)" />
		<button class="btn btn-outline-primary btn-sm ms-1 me-2" type="submit"><i class="fas fa-search"></i></button>
	</EditForm>
</div>

@code {

	[Parameter] public EventCallback<ReturnArgs> OnNoteSelected { get; set; }
	private TypeaheadVM TypeaheadVM = new TypeaheadVM();

	private async Task<IEnumerable<Notes>> SearchNotes(string searchText)
	{
		return await Task.FromResult(State!.Value.NotesList
			.Where(x => x.FirstName.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.FirstName));
	}

	private void HandleFormSubmit()
	{
		if (TypeaheadVM.SelectedNote is not null)
		{
			ReturnArgs args = new ReturnArgs
				{
					ShowDetailCard = true,
					DetailNote = TypeaheadVM.SelectedNote
				};
			OnNoteSelected.InvokeAsync(args);
		}
		else
		{
			Logger!.LogInformation($"...{nameof(TypeaheadVM.SelectedNote)} is null");
		}
	}

	private const int MinLen = 2;
	private const int MaxSug = 5;
	private string? HelpMsg = $"Please enter at least {MinLen} characters to perform a search.";

}
