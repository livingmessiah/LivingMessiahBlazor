@using System.Linq
@using Microsoft.Extensions.Logging;

@inject ILogger<Typeahead>? Logger
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<State>? State
@inject IDispatcher Dispatcher

<div class="d-print-none">

	<BlazoredTypeahead SearchMethod="SearchNotes"
										 TValue="NotesQuery"
										 TItem="NotesQuery"
										 Value="CurrentNote"
										 ValueChanged="SelectedResultChanged"
										 ValueExpression="@(() => CurrentNote)"
										 EnableDropDown="true"
										 MaximumSuggestions="100"
										 MinimumLength="2"
										 placeholder="Search first name...">
		<SelectedTemplate Context="contextNotes">
			@contextNotes!.FirstName @contextNotes!.FamilyName [@contextNotes.Id]
		</SelectedTemplate>
		<HelpTemplate>Please enter at least 2 characters to perform a search on the first name</HelpTemplate>
		<ResultTemplate Context="contextNotes">
			@contextNotes.FirstName @contextNotes.FamilyName [@contextNotes.Id]
		</ResultTemplate>
	</BlazoredTypeahead>

</div>

@code {

	[Parameter, EditorRequired] public required NotesQuery? SelectedNote { get; set; }
	protected NotesQuery? CurrentNote { get; set; }

	protected override void OnParametersSet()
	{
		// string inside = $"{nameof(Typeahead)}!{nameof(OnParametersSet)}";
		// Logger!.LogDebug(string.Format("Inside {0}", inside));
		CurrentNote = State!.Value.SelectedNote;
	}

	private async Task<IEnumerable<NotesQuery>> SearchNotes(string searchText)
	{
		return await Task.FromResult(State!.Value.NotesList!
			.Where(x => x.FirstName!.ToLower().Contains(searchText.ToLower()))
			.OrderBy(o => o.FirstName));
	}

	private void SelectedResultChanged(NotesQuery selectedNote)
	{
		// string inside = $"{nameof(Typeahead)}!{nameof(SelectedResultChanged)}";
		// Logger!.LogError(string.Format("Inside {0}", inside));
		Dispatcher!.Dispatch(new Set_SelectedNote_Action(selectedNote));
		Dispatcher!.Dispatch(new Set_ShowDetailCard_Action(true));
	}
}

