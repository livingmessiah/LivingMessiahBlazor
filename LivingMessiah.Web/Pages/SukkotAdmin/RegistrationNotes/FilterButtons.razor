@using LivingMessiah.Web.Pages.SukkotAdmin.RegistrationNotes.Enums
@using Microsoft.Extensions.Logging;

@inject ILogger<FilterButtons>? Logger
@inject IDispatcher Dispatcher
@inject IState<State>? State

<div class="d-print-none mb-2">
	<div class="container d-flex justify-content-end mt-2">
		@foreach (var item in NotesFilter.List.OrderBy(o => o.Value))
		{
			<button @onclick="@(() => OnButtonClicked(item))"
							class="btn @item.CssTextColor btn-sm @_disabled @ActiveFilter(item)">
				@item.Name &nbsp;<i class="fas fa-chevron-circle-right"></i>
			</button>
		}

	</div>

</div>

@code {
	[Parameter, EditorRequired] public required NotesFilter? CurrentFilter { get; set; }
	[Parameter, EditorRequired] public required bool CurrentShowDetailCard { get; set; }

	private string? _disabled; // = "";
	private NotesFilter? _selectedFilter; // = Constants.DefaultFilter;

	protected override void OnParametersSet()
	{
		string inside = $"{nameof(FilterButtons)}!{nameof(OnParametersSet)}";
		Logger!.LogDebug(string.Format("inside {0}", inside));
		//Logger!.LogDebug(string.Format("inside {0}; _disabled: {1}; _selectedFilter: {2} ", inside, _disabled, _selectedFilter!.Name));
		
		_selectedFilter = CurrentFilter;

		if (CurrentShowDetailCard)
		{
			_disabled = " disabled";
		}
		else
		{
			_disabled = "";
		}
	}

	private void OnButtonClicked(NotesFilter filter)
	{
		Logger!.LogInformation($"Inside {nameof(FilterButtons)}!{nameof(OnButtonClicked)}; filter: {filter.Name}");
		Dispatcher!.Dispatch(new Set_CurrentFilter_Action(filter));
		Dispatcher!.Dispatch(new Set_ListFiltered_Action(filter));
	}

	public string ActiveFilter(NotesFilter filter)
	{
		if (filter == _selectedFilter)
		{
			return "active";
		}
		else
		{
			return "";
		}
	}

}
