@page "/BlazorSyncFusion/datagrid/grid-header-footer"
<h3> Grid Header Footer Custom Edit Dialog</h3>
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids

<SfGrid @ref="Grid" DataSource="@Orders" AllowPaging="true"
				Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" Height="315">
	<GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog">
		<HeaderTemplate>
			@{
				var text = GetHeader((context as Order));
				<span>@text</span>
			}
		</HeaderTemplate>
		<FooterTemplate>
			<SfButton OnClick="@Save" IsPrimary="true">@ButtonText</SfButton>
			<SfButton OnClick="@Cancel">Cancel</SfButton>
		</FooterTemplate>
	</GridEditSettings>
	<GridColumns>
		<GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules { Required = true })" TextAlign="TextAlign.Right" Width="120"></GridColumn>
		<GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules { Required = true })" Width="120"></GridColumn>
		<GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="TextAlign.Right" Width="130" Type="ColumnType.Date"></GridColumn>
		<GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" EditType="EditType.NumericEdit" Width="120"></GridColumn>
		<GridColumn Field=@nameof(Order.ShipCountry) HeaderText="Ship Country" EditType="EditType.DropDownEdit" Width="150"></GridColumn>
	</GridColumns>
</SfGrid>

@code{
	SfGrid<Order> Grid { get; set; }
	public List<Order> Orders { get; set; }
	public string Header { get; set; }
	public string ButtonText { get; set; }
	public string GetHeader(Order Value)
	{
		if (Value.OrderID == null)
		{
			ButtonText = "Insert";
			return "Insert New Order";
		}
		else
		{
			ButtonText = "Save Changes";
			return "Edit Record Details of " + Value.OrderID.ToString();
		}
	}
	public async Task Cancel()
	{
		await Grid.CloseEdit();     //Cancel editing action
	}
	public async Task Save()
	{
		await Grid.EndEdit();       //Save the edited/added data to Grid
	}
	protected override void OnInitialized()
	{
		Orders = Enumerable.Range(1, 75).Select(x => new Order()
		{
			OrderID = 1000 + x,
			CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
			Freight = 2.1 * x,
			OrderDate = DateTime.Now.AddDays(-x),
			ShipCountry = (new string[] { "USA", "UK", "CHINA", "RUSSIA", "INDIA" })[new Random().Next(5)]
		}).ToList();
	}

	public class Order
	{
		public int? OrderID { get; set; }
		public string CustomerID { get; set; }
		public DateTime? OrderDate { get; set; }
		public double? Freight { get; set; }
		public string ShipCountry { get; set; }
	}
}
