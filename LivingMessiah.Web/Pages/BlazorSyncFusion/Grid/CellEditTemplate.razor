@page "/BlazorSyncFusion/DataGrid/cell-edit-template"
<PageTitle>Cell Edit Template</PageTitle>
<h3>Cell Edit Template</h3>

@using System;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Components;
@using Microsoft.Extensions.Logging;
@using Syncfusion.Blazor.Grids;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;

<div class="row">
	<SfGrid DataSource="blogs" AllowTextWrap="true" AllowPaging="true" Toolbar="@(new string[] { "Add", "Edit", "Delete", "Update", "Cancel" })">
		<GridEvents OnActionBegin="ActionBeginHandler" TValue="Blog"></GridEvents>
		<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"> </GridEditSettings>
		<GridPageSettings PageSize="8"></GridPageSettings>

		<GridColumns>

			<GridColumn Field="@nameof(Blog.BlogId)" HeaderText="Blog ID" IsPrimaryKey="true" 
					Width="110" ValidationRules="@(new ValidationRules { Required = true})">
@*				<EditTemplate>
					<SfTextBox ID="BlogId" @bind-value="(context as Blog).BlogId" Enabled="@Check" Placeholder="BLOG-0000" >

					</SfTextBox>
				</EditTemplate>
*@			</GridColumn>

			<GridColumn Field="@nameof(Blog.Title)" Width="260" ValidationRules="@(new ValidationRules { Required = true })"></GridColumn>

			<GridColumn Field="@nameof(Blog.AuthorName)" HeaderText="Author Name" Width="120">
				<EditTemplate>
					<SfDropDownList DataSource="authorNamesList" TValue="string" TItem="BlogAuthorNames" @bind-Value="((context as Blog).AuthorName)">
						<DropDownListFieldSettings Text="authorNames"></DropDownListFieldSettings>
					</SfDropDownList>

				</EditTemplate>
			</GridColumn>

			<GridColumn Field="@nameof(Blog.Status)" TextAlign="TextAlign.Center" Width="150" ValidationRules="@(new ValidationRules { Required = true })">
				<EditTemplate>
					<SfDropDownList ID="Status" DataSource="blogStatusList" TValue="string" 
					TItem="BlogStatus" @bind-Value="((context as Blog).Status)">
						<DropDownListFieldSettings Text="Statuses"></DropDownListFieldSettings>
					</SfDropDownList>
				</EditTemplate>

				<Template>
					@{
						var Context = (context as Blog).Status;
						@if (Context == "Published")
						{
							<div class="title-published">
								<span class="font"> @Context </span>
							</div>
						}
						else if (Context == "Draft")
						{
							<div class="title-draft">
								<span class="font"> @Context </span>
							</div>
						}
						else
						{
							<div class="title-review">
								<span class="font">@Context</span>
							</div>
						}
					}
				</Template>
			</GridColumn>

			<GridColumn Field="@nameof(Blog.Tags)" TextAlign="TextAlign.Center" Width="170">
				<Template>
					@{
						var Context = (context as Blog).Tags;
						@for (int i = 0; i < Context?.Length; i++)
						{
							<div class="tags">@Context[i]</div>
						}
					}
				</Template>
				<EditTemplate>
					<SfMultiSelect @ref="multiSelect" DataSource="bloggerContents" 
						TValue="string[]" TItem="TagContent" 
							@bind-Value="((context as Blog).Tags)">

						<MultiSelectFieldSettings Value="TagTopic"></MultiSelectFieldSettings>
					</SfMultiSelect>
				</EditTemplate>

			</GridColumn>

		</GridColumns>
	</SfGrid>

	<style>
		.title-published {
				background: #90F0BD;
				border-radius: 34px;
				padding: 8px 16px;
				text-align: center
		}

		.title-draft {
				background: #FFE87F;
				border-radius: 34px;
				padding: 8px 16px;
				text-align: center;
		}

		.title-review {
				background: #A8E9F7;
				border-radius: 34px;
				padding: 8px 16px;
				text-align: center;
		}

		.tags {
				background: #6c757d;
				color: #fff;
				border-radius: 17px;
				padding: 4px 8px;
				text-align: center;
				margin-top: 4px;
				display: flex;
				justify-content: center;
		}
	</style>
</div>


@code {
	
SfMultiSelect<string[], TagContent> multiSelect;
public Boolean Check = true;

public List<Blog> blogs { get; set; }
protected override void OnInitialized()
{
	base.OnInitialized();
	blogs = Enumerable.Range(1, 50).Select((x) => new Blog()
	{
		Title = (new string[] { "Lorem ipsum dolor sit amet consectetur adipiscing elit.", " Fusce nec tellus sed augue semper porta Vestibulum lacinia arcu eget nulla. ", "Aptent taciti sociosqu ad litora conubia nostra per inceptos himenaeos.", "Curabitur sodales ligula in libero sed dignissim lacinia nunc curabitur tortor." })[new Random().Next(4)],
		AuthorName = (new string[] { "ALFKI", "ANTON", "BOLID", "BLONP", "ANATR" })[new Random().Next(5)],
		Status = (new string[] { "Published", "Draft" })[new Random().Next(2)],
		Tags = (new string[] { "JavaScript", "Blazor" }),
		BlogId = "BLOG-10" + x

	}).ToList();
}

public void ActionBeginHandler(ActionEventArgs<Blog> args)
{
	if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
	{
		args.Data.Tags = multiSelect.Value;
	}
	if (args.RequestType.ToString() == "Add")
	{
		Check = true;
	}
	else
	{
		Check = false;
	}
}

public class Blog
{
	[RegularExpression("BLOG-[0-9]*", ErrorMessage = "Blog ID field should start with BLOG-")]
	public string BlogId { get; set; }
	public string Title { get; set; }
	public string AuthorName { get; set; }
	public string Status { get; set; }
	public string[] Tags { get; set; } = new string[] { };
}

//#region lookup controls
public class BlogStatus
{
	public string Statuses { get; set; }
}

public List<BlogStatus> blogStatusList = new List<BlogStatus>
		{
				new BlogStatus() {Statuses = "Published"},
				new BlogStatus() {Statuses = "Draft"},
				new BlogStatus() {Statuses = "Review"},

		}.ToList();


public class BlogAuthorNames
{
	public string authorNames { get; set; }
}

public List<BlogAuthorNames> authorNamesList = new List<BlogAuthorNames>
		{
				new BlogAuthorNames() {authorNames = "ALFKI"},
				new BlogAuthorNames() {authorNames = "BOLID"},
				new BlogAuthorNames() {authorNames = "ANTON"},
				new BlogAuthorNames() {authorNames = "BLONP"},
				new BlogAuthorNames() {authorNames = "ANATR"}

		}.ToList();


public class TagContent
{
	public int TagId { get; set; }
	public string TagTopic { get; set; }
}

public List<TagContent> bloggerContents = new List<TagContent>
		{
				new TagContent() {TagId = 1 , TagTopic = "JavaScript"},
				new TagContent() {TagId = 2 , TagTopic = "Blazor"},
				new TagContent() {TagId = 3 , TagTopic = "ASP.NET CORE"},
				new TagContent() {TagId = 4 , TagTopic = "Xamarin"},
				new TagContent() {TagId = 5, TagTopic = "Flutter"}

		}.ToList();
	//#endregion

}
