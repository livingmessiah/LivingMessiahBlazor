@page "/SukkotAdmin/DonationsTreeGrid/"
@using LivingMessiah.Web.Pages.SukkotAdmin.Donations.Domain
@using Syncfusion.Blazor.TreeGrid
@using Grid = Syncfusion.Blazor.Grids

<div class="pb-2 mt-4 mb-4 border-bottom">
	<h3><i class="fas fa-dollar-sign"></i> Donations Tree Grid</h3>
</div>

<div class="col-lg-12 control-section">
	<div class="content-wrapper">
		<div class="row mt-2">

			@using Syncfusion.Blazor.TreeGrid;
			@using Syncfusion.Blazor.Data;

			<SfTreeGrid ChildMapping="Children" TreeColumnIndex="1" DataSource="@TreeData" TValue="BusinessObject">
				<TreeGridColumns>
					<TreeGridColumn Field="TaskId" HeaderText="Task ID" Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
					<TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="160"></TreeGridColumn>
					<TreeGridColumn Field="Duration" HeaderText="Duration" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
					<TreeGridColumn Field="Progress" HeaderText="Progress" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
					<TreeGridColumn Field="Priority" HeaderText="Priority" Width="80"></TreeGridColumn>
				</TreeGridColumns>
			</SfTreeGrid>

			@code{
				public class BusinessObject
				{
					public int TaskId { get; set; }
					public string TaskName { get; set; }
					public int Duration { get; set; }
					public int Progress { get; set; }
					public string Priority { get; set; }
					public List<BusinessObject> Children { get; set; }
				}
				public List<BusinessObject> TreeData = new List<BusinessObject>();
				protected override void OnInitialized()
				{
					List<BusinessObject> Record1 = new List<BusinessObject>();
					BusinessObject Child1 = new BusinessObject() { TaskId = 2, TaskName = "Plan timeline", Progress = 100, Duration = 5, Priority = "Normal" };
					BusinessObject Child2 = new BusinessObject() { TaskId = 3, TaskName = "Plan budget", Duration = 5, Progress = 100, Priority = "Low" };
					BusinessObject Child3 = new BusinessObject() { TaskId = 4, TaskName = "Allocate resources", Duration = 5, Progress = 100, Priority = "Critical" };
					Record1.Add(Child1);
					Record1.Add(Child2);
					Record1.Add(Child3);
					TreeData.Add(new BusinessObject() { TaskId = 1, TaskName = "Planning", Duration = 10, Progress = 70, Children = Record1, Priority = "High" });


					List<BusinessObject> Record2 = new List<BusinessObject>();
					BusinessObject Child4 = new BusinessObject() { TaskId = 6, TaskName = "Software Specification", Progress = 60, Duration = 3, Priority = "Normal" };
					BusinessObject Child5 = new BusinessObject() { TaskId = 7, TaskName = "Develop Prototype", Duration = 3, Progress = 100, Priority = "Critical" };


					Record2.Add(Child4);
					Record2.Add(Child5);
					TreeData.Add(new BusinessObject() { TaskId = 5, TaskName = "Design", Duration = 3, Progress = 86, Children = Record2, Priority = "High" });
				}
			}

			<SfTreeGrid AllowSorting="true" DataSource="@TreeGridList"
									ParentIdMapping="RegistrationId"
									IdMapping="Id" TreeColumnIndex="1"
									Height="315" AllowPaging="false"
									Toolbar="@(new List<string>() { "Edit", "Delete", "Update", "Cancel" })">

				<TreeGridPageSettings PageSize="2"></TreeGridPageSettings>

				<TreeGridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"
															Mode="@Syncfusion.Blazor.TreeGrid.EditMode.Row"
															NewRowPosition="Syncfusion.Blazor.TreeGrid.RowPosition.Bottom">
				</TreeGridEditSettings>

				<TreeGridColumns>
					<TreeGridColumn Field=@nameof(TreeGridVM.Id) HeaderText="Id" Width="35" AllowSorting="true"> </TreeGridColumn>
					<TreeGridColumn Field=@nameof(TreeGridVM.FirstName) HeaderText="First Name" Width="70" AllowSorting="true"></TreeGridColumn>
					<TreeGridColumn Field=@nameof(TreeGridVM.FamilyName) HeaderText="Last Name" Width="70" AllowSorting="true"></TreeGridColumn>
					<TreeGridColumn Field=@nameof(TreeGridVM.EMail) HeaderText="Email" Width="80" AllowSorting="false"></TreeGridColumn>

					<TreeGridColumn Field="@nameof(DonationDetail.Id)" IsPrimaryKey="true" Visible="true"
													HeaderText="Id" Width="45">
					</TreeGridColumn>

					<TreeGridColumn Field="@nameof(DonationDetail.RegistrationId)"
													HeaderText="Reg Id" Width="45" Visible="true">
					</TreeGridColumn>

					<TreeGridColumn Field="@nameof(DonationDetail.Detail)" Visible="true"
													HeaderText="Dtl" Width="45">
					</TreeGridColumn>

					<TreeGridColumn Field=@nameof(DonationDetail.Amount) HeaderText="Amount"
													ValidationRules="@(new Grid.ValidationRules{ Required=true, Range = new double[]{1, 1000}})"
													Width="70" Format="c0" TextAlign="TextAlign.Right">
					</TreeGridColumn>



					@*<TreeGridColumn Field=@nameof(DonationDetail.Notes) HeaderText="Notes" Width="110">
				</TreeGridColumn>

				<TreeGridColumn Field=@nameof(DonationDetail.ReferenceId) HeaderText="Reference"
												ValidationRules="@(new Grid.ValidationRules{ Required=true})" Width="120">
				</TreeGridColumn>

				<TreeGridColumn Field=@nameof(DonationDetail.CreateDate) HeaderText="Date"
												ValidationRules="@(new Grid.ValidationRules{ Required=true})"
												DefaultValue="@(DateTime.Now)"
												EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="90">
				</TreeGridColumn>

				<TreeGridColumn Field="@nameof(DonationDetail.CreatedBy)" Visible="true"
												HeaderText="Created by" Width="65">
				</TreeGridColumn>*@


				</TreeGridColumns>
			</SfTreeGrid>

		</div>
	</div>
</div>

@if (DatabaseError)
{
	<p class="text-danger"><em>@DatabaseErrorMsg</em></p>
}
else
{
	if (DatabaseWarning)
	{
		<p class="text-warning">@DatabaseWarningMsg</p>
	}
}

@*

	<TreeGridColumn Field=@nameof(TreeGridVM.StatusId) HeaderText="SID" Width="40" AllowSorting="false"></TreeGridColumn>
	<TreeGridColumn Field=@nameof(TreeGridVM.LocationName) HeaderText="Location" Width="60" AllowSorting="true"></TreeGridColumn>
	<TreeGridColumn Field=@nameof(TreeGridVM.RegistrationFee) HeaderText="Reg. Fee" Width="60" Format="c0" TextAlign="TextAlign.Right" AllowSorting="false"></TreeGridColumn>
	<TreeGridColumn Field=@nameof(TreeGridVM.CampCost) HeaderText="Lodging" Width="60" Format="c0" TextAlign="TextAlign.Right" AllowSorting="false"></TreeGridColumn>
	<TreeGridColumn Field=@nameof(TreeGridVM.TotalDonation) HeaderText="Ttl Don" Width="60" Format="c0" TextAlign="TextAlign.Right" AllowSorting="false"></TreeGridColumn>
	<TreeGridColumn Field=@nameof(TreeGridVM.AmountDue) HeaderText="Amt Due" Width="70" Format="c0" TextAlign="TextAlign.Right" AllowSorting="false"></TreeGridColumn>

*@

---

# Code Behind
- C:\Source\LivingMessiahBlazor\src\LivingMessiah.Web\Pages\SukkotAdmin\Donations\DonationsTreeGrid.razor.cs

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Components;

using LivingMessiah.Web.Pages.SukkotAdmin.Donations.Data; // using SukkotApi.Data;
using LivingMessiah.Web.Pages.SukkotAdmin.Donations.Domain; //using SukkotApi.Domain.Donations.Queries;
using LivingMessiah.Web.Pages.SukkotAdmin.Donations.Enums;

using static LivingMessiah.Web.Services.Auth0;
using Microsoft.AspNetCore.Authorization;

namespace LivingMessiah.Web.Pages.SukkotAdmin.Donations
{
	[Authorize(Roles = Roles.AdminOrSukkot)]
	public partial class DonationsTreeGrid
	{
		[Inject]
		public ILogger<DonationsTreeGrid> Logger { get; set; }

		[Inject]
		public IDonationRepository db { get; set; }

		public IEnumerable<TreeGridVM> TreeGridList { get; set; }

		protected bool DatabaseError { get; set; } = false;
		protected string DatabaseErrorMsg { get; set; }
		protected bool DatabaseWarning = false;
		protected string DatabaseWarningMsg { get; set; }

		//public BaseDonationStatusFilterSmartEnum CurrentFilter { get; set; } = BaseDonationStatusFilterSmartEnum.FullList;
		protected override async Task OnInitializedAsync()
		{
			await GetDataWithParms(BaseDonationStatusFilterSmartEnum.FullList);
		}

		private async Task GetDataWithParms(BaseDonationStatusFilterSmartEnum filter)
		{
			BaseRegistrationSortSmartEnum sortAndDirection = BaseRegistrationSortSmartEnum.ByFirstName;
			string sort = sortAndDirection.SqlTableColumnName + sortAndDirection.Order;

			Logger.LogDebug($"Inside {nameof(DonationsTreeGrid)}!{nameof(GetDataWithParms)}; smartEnumFilter.Name:{filter.Name}; sort:{sort}");
			try
			{
				TreeGridList = await db.GetTreeGridList(filter, sort);
				if (TreeGridList == null)
				{
					DatabaseWarning = true;
					DatabaseWarningMsg = "TreeGridList NOT FOUND";
				}
			}
			catch (Exception ex)
			{
				DatabaseError = true;
				DatabaseErrorMsg = $"Error reading database";
				Logger.LogError(ex, $"...{DatabaseErrorMsg}");
			}
			StateHasChanged(); 
		}


	}
}


---

# View Model

using System;

namespace LivingMessiah.Web.Pages.SukkotAdmin.Donations.Domain
{
	public class TreeGridVM
	{
		public int Id { get; set; }
		public string EMail { get; set; }
		public string FamilyName { get; set; }
		public string FirstName { get; set; }
		public int? DetailId { get; set; }
		public int? RegistrationId { get; set; } 
		public int? Detail { get; set; }
		public decimal? Amount { get; set; }
		public string Notes { get; set; }      
		public string ReferenceId { get; set; } 
		public DateTime? CreateDate { get; set; }
		public string CreatedBy { get; set; }
		public string Name { get; set; } 
	}
}


--- DonationRepository
		Task<List<TreeGridVM>> GetTreeGridList(BaseDonationStatusFilterSmartEnum filter, string sortAndOrder);


		public async Task<List<TreeGridVM>> GetTreeGridList(BaseDonationStatusFilterSmartEnum filter, string sortAndOrder)
		{
			base.Parms = new DynamicParameters(new { DonationStatus = filter.Value });

			base.Sql = $@"
SELECT r.Id, r.EMail, r.FamilyName, r.FirstName
, d.Id AS DetailId, d.RegistrationId, d.Detail, d.Amount, d.Notes, d.ReferenceId, d.CreateDate, d.CreatedBy 
FROM Sukkot.tvfDonationReport(@DonationStatus) r
LEFT OUTER JOIN Sukkot.Donation d ON r.Id = d.RegistrationId
ORDER BY {sortAndOrder}
";

			//base.log.LogDebug($"Inside {nameof(DonationRepository)}!{nameof(GetDonationReport)}, filter.Name/filter.Value: {filter.Name}/{filter.Value}");
			//base.log.LogDebug($"Inside {nameof(DonationRepository)}!{nameof(GetDonationReport)}, Sql: {Sql}");

			return await WithConnectionAsync(async connection =>
			{
				var rows = await connection.QueryAsync<TreeGridVM>(base.Sql, base.Parms);
				return rows.ToList();
			});
		}


