
@code{
	List<ToDoItem> items = new List<ToDoItem>();
	private string newItem;
	private bool IsSortedAscending;
	private string CurrentSortColumn;

	/// <summary>
	/// This method is responsible for loading the initial data the page requires.  We store this sample data
	/// in a JSON file.
	/// </summary>
	/// <returns></returns>
	protected override void OnInitialized()
	{
		items = ToDoService.Get();
	}

	/// <summary>
	/// This method adds a new ToDo item.
	/// </summary>
	private void AddTodo()
	{
		if (!string.IsNullOrWhiteSpace(newItem))
		{
			var newToDoItem = new ToDoItem()
			{
				DateCreated = DateTime.Now,
				Description = newItem,
				ID = Guid.NewGuid()
			};

			items = ToDoService.Add(newToDoItem);

			newItem = string.Empty; //We need to reset this string, otherwise the text box will still contain the value typed in.
		}
	}

	private void ToggleToDo(Guid id)
	{
		items = ToDoService.Toggle(id);
	}

	private void RemoveTodo(Guid id)
	{
		items = ToDoService.Delete(id);
	}

	private string GetSortStyle(string columnName)
	{
		if (CurrentSortColumn != columnName)
		{
			return string.Empty;
		}
		if (IsSortedAscending)
		{
			return "▲";
		}
		else
		{
			return "▼";
		}
	}

	private void SortTable(string columnName)
	{
		if (columnName != CurrentSortColumn)
		{
			//We need to force order by descending on the new column
			items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
			CurrentSortColumn = columnName;
			IsSortedAscending = true;

		}
		else //Sorting against same column but in different direction
		{
			if (IsSortedAscending)
			{
				items = items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
			}
			else
			{
				items = items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
			}

			IsSortedAscending = !IsSortedAscending;
		}
	}
}
