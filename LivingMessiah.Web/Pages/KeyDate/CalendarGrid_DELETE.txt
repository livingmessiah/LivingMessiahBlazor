
# Service
		//Task<List<string>> GetYearList();  //Task<List<int>> GetYearLookupList();
		//Task<int> GetYearLookup(BaseRelativeYearSmartEnum relative);

		//private List<int> YearLookupList { get; set; }


		////public async Task<List<int>> GetYearList() 
		//public async Task<List<string>> GetYearList() 
		//{ 
		//	return await Populate();
		//}

		//BaseRelativeYearSmartEnum GetYearSmartEnum(string relative);
		//public BaseRelativeYearSmartEnum GetYearSmartEnum(string relative)
		//{
		//	if (relative == "First")
		//	{
		//		return BaseRelativeYearSmartEnum.Previous;
		//	}
		//	else
		//	{
		//		if (relative == "Second")
		//		{
		//			return BaseRelativeYearSmartEnum.Current;
		//		}
		//		else
		//		{
		//			return BaseRelativeYearSmartEnum.Next;
		//		}
		//	}
		//}




		private List<string> YearList { get; set; }

			/*
			//for (int i = 1; i < 4; i++)
			int i = 0;
			string s = "";
			foreach (string year in YearList)
			{
				i += 1;
				s = BaseRelativeYearSmartEnum.FromValue(i).Name;
				YearLookupList.Add(new YearLookup() { ID=year, Text=  s });
			}

			Logger.LogDebug(string.Format("Inside {0} i:{1}, s:{2}", nameof(KeyDateService) + "!" + nameof(Populate), i, s));

			return YearLookupList;
			*/



		/*
		public async Task<int> GetYearLookup(BaseRelativeYearSmartEnum relative)
		{
			Logger.LogDebug(String.Format("Inside {0}, int: {1}", nameof(KeyDateService) + "!" + nameof(GetYearLookup), year));
			if (YearList == null)
			{
				await Populate(); //	YearLookupList = await db.GetYears();
			}

			int j = 0;

			for (int i = 0; i < 2; i++)
			{
				if (i==0 && relative == BaseRelativeYearSmartEnum.Previous)
				{
					j=i;
				}
				else
				{
					if (i == 1 && relative == BaseRelativeYearSmartEnum.Current)
					{
						j = i;
					}
					else
					{
						j = i;
					}
				}
			}

			return j;
		}
		*/


		/*
		private async Task<List<string>> Populate()  //Task<List<int>> Populate()
		{
			if (YearList != null)
			{
				return YearList;
			}
			try
			{
				YearList = await db.GetYears();
				return YearList;
			}
			catch (System.Exception ex)
			{
				ExceptionMessage = $"Inside {nameof(Populate)}";
				Logger.LogError(ex, ExceptionMessage);
				throw new InvalidOperationException(ExceptionMessage);
			}
		}
		*/


# .razor
		<SfDropDownList TValue="string" TItem="YearLookup"
										Placeholder="Select Year"
										@bind-Value="@DropDownValue"
										DataSource="@YearLookupList">
			<DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
			<DropDownListEvents TItem="YearLookup" TValue="string"
													OnValueSelect="OnValueSelect">
			</DropDownListEvents>
		</SfDropDownList>



@*
	# Details
	- Why cant I just have a couple of simple compontents using a table template for feast day detail
	https://blazor.syncfusion.com/demos/datagrid/detail-template?theme=bootstrap5
	https://blazor.syncfusion.com/demos/datagrid/row-template
	https://blazor.syncfusion.com/demos/datagrid/master-details/
*@



# .razor.cs


		//private YearLookup CurrentYearLookup { get; set; }
		//private BaseRelativeYearSmartEnum YearSmartEnum;

				//YearSmartEnum = BaseRelativeYearSmartEnum.Current;
				//CurrentYearLookup = YearLookupList.Where(w => w.Text == YearSmartEnum.Name.ToString()).SingleOrDefault();


				//if (i!=0)
				//{
				//	ChangedText = BaseRelativeYearSmartEnum.Current.Name;
				//}
				//else
				//{
				//	ChangedText = "?";
				//}




		//[Parameter]
		public BaseRelativeYearSmartEnum RelativeYear { get; set; } = RelativeYearEnum.Current;

		protected override async Task OnInitializedAsync()
		{
			Logger.LogDebug($"Inside {nameof(CalendarGrid)}!{nameof(OnInitializedAsync)}");
			Constants = await db.GetConstants();
			PopulateYearLookupList();
			await PopulateCalendarEntries(GetYearId(RelativeYear));
		}


		private int GetYearId(RelativeYearEnum relativeYear)
		{
			return relativeYear switch
			{
				RelativeYearEnum.Previous => Constants.PreviousYear,
				RelativeYearEnum.Current => Constants.CurrentYear,
				RelativeYearEnum.Next => Constants.NextYear,
				RelativeYearEnum.None => 0,
				_ => Constants.CurrentYear,
			};
		}


		public async Task OnValueSelect(SelectEventArgs<YearLookup> args)
		{
			int selectedYearId = 0;
			selectedYearId = int.TryParse(args.ItemData.ID, out selectedYearId) ? selectedYearId : 0;
			Logger.LogDebug(String.Format("...inside {0}, relateiveYear: {1}", nameof(CalendarGrid) + "!" + nameof(OnValueSelect), selectedYearId));

			if (selectedYearId != 0)
			{
				RelativeYear = RelativeYearEnum.Previous ; // RelativeYearEnum.Current;
				await PopulateCalendarEntries(GetYearId(RelativeYear));
			}
		}


		public string DropDownValue = "Current";



		//protected List<FeastDay> FeastDays;
		//protected List<LunarMonth> LunarMonths;
		//protected List<Season> Seasons;


		protected override async Task OnInitializedAsync()
		{
			Logger.LogDebug($"Inside {nameof(CalendarGrid)}!{nameof(OnInitializedAsync)}");
			try
			{
				Constants = await db.GetConstants();
				PopulateYearLookupList();
				await PopulateCalendarEntries(GetYearId(RelativeYear));
			}
			catch (Exception)
			{
			}
		}

		//private int SelectedYearId = 0;



		public async Task OnValueSelect(SelectEventArgs<YearLookup> args)
		{
			int selectedYearId = 0;
			selectedYearId = int.TryParse(args.ItemData.ID, out selectedYearId) ? selectedYearId : 0;
			Logger.LogDebug(String.Format("...inside {0}, relateiveYear: {1}", nameof(CalendarGrid) + "!" + nameof(OnValueSelect), selectedYearId));

			if (selectedYearId != 0)
			{
				RelativeYear = RelativeYearEnum.Previous ; // RelativeYearEnum.Current;
				try
				{
					await PopulateCalendarEntries(GetYearId(RelativeYear));
				}
				catch (Exception)
				{
				}
			}
			
		}




/*

Seasons.razor 
	<td class="h3"><span class="badge @context.BadgeColor"><i class="@context.Icon"></i> @context.Name</span></td>

		public void CustomizeCell(QueryCellInfoEventArgs<CalendarEntry> args)
		{
			if (args.Column.Field == nameof(CalendarEntryDateRange.DateTypeId))
			{
				//BaseDateTypeSmartEnum e = BaseDateTypeSmartEnum.FromName(args.Data.LocationName, false);
				BaseDateTypeSmartEnum e = BaseDateTypeSmartEnum.FromValue(args.Data.DateTypeId);
				args.Cell.AddClass(new string[] { e.TextColor });
			}
		}






			/*
			return relativeYear switch
			{
				RelativeYearEnum.Previous => Constants.PreviousYear,
				RelativeYearEnum.Current => Constants.CurrentYear,
				RelativeYearEnum.Next => Constants.NextYear,
				RelativeYearEnum.None => 0,
				_ => Constants.CurrentYear,
			};
			*/









<div class="col-lg-12 control-section">
	<div class="control_wrapper">
		<SfDropDownList TValue="string" TItem="YearLookup"
										Placeholder="Select Year"
										@bind-Value="@ChangedID"
										DataSource="@YearLookupList">
			<DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
			<DropDownListEvents TItem="YearLookup" TValue="string"
													ValueChange="OnChange">
			</DropDownListEvents>
		</SfDropDownList>
	</div>
</div>

<div class="row">
	<div class="col-12">
		<ul>
			<li>ChangedID: @ChangedID</li>
			<li>ChangedText: @ChangedText</li>
		</ul>
	</div>
</div>


# Repository

		/*
		//public async Task<List<int>> GetYears()
		public async Task<List<string>> GetYears()
		{
			log.LogDebug(String.Format("Inside {0}", nameof(KeyDateRepository) + "!" + nameof(GetYears) ));
			//base.Sql = $"SELECT PreviousYear, CurrentYear, NextYear FROM KeyDate.vwConstants";
			base.Sql = $@"
SELECT 
	CAST(PreviousYear AS char(4)) PreviousYear
,	CAST(CurrentYear AS char(4)) CurrentYear
,	CAST(NextYear AS char(4)) NextYear
FROM KeyDate.vwConstants
";
			return await WithConnectionAsync(async connection =>
			{
				var rows = await connection.QueryAsync<string>(sql: base.Sql);
				return rows.ToList();
			});
		}
		*/

			//base.Sql = $"SELECT PreviousYear, CurrentYear, NextYear FROM KeyDate.vwConstants";

		//Task<List<int>> GetYears();
		//Task<List<string>> GetYears();

			//int yearId = GetYearId(relativeYear);
			//string yearId = (int)GetYearIdWhereArg(relativeYear);

