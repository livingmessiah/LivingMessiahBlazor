@page "/UpcomingEventsEditMarkdown/{Id:int}"

@using LoginLink = LivingMessiah.Web.Links.Account
@using static LivingMessiah.Web.Services.Auth0;

@* Because the razor page is called `Page.razor` I have to call this `PageLink` *@
@using PageLink = LivingMessiah.Web.Links.UpcomingEvents.EditMarkdown
<PageTitle>@PageLink.Title</PageTitle>

<h2 class="mt-2">
	<i class="@PageLink.Icon"></i> @PageLink.Title
</h2>

<AuthorizeView Roles="@Roles.AdminOrAnnouncements">

	<Authorized>
		<SpecialEventDescriptionMdEdit Id="@Id" />
	</Authorized>

	<NotAuthorized>

		<div class="card border-warning my-5">
			<div class="card-header">Not Authorized</div>

			<div class="card-body">
				<h5 class="">To edit <b>@PageLink.Title (Id:@Id)</b> you need to be logged in.</h5>
				<button @onclick="@(() => RedirectToLoginClick(PageLink.Page, Id))"
								type="button" class="btn-primary btn-sm">
					Login <i class='fas fa-sign-in-alt'></i>
				</button>

			</div>

		</div>

	</NotAuthorized>

</AuthorizeView>


@code
{
	[Inject]
	NavigationManager NavigationManager { get; set; }

	[Parameter]
	public int Id { get; set; } = 0;

	void RedirectToLoginClick(string returnUrl, int id)
	{
		NavigationManager.NavigateTo($"{LoginLink.Login}?returnUrl={returnUrl}/{id}", true);
	}

}
