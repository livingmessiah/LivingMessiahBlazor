using Ardalis.SmartEnum;
using System;

namespace LivingMessiah.Web.Features.Calendar.Enums;

public abstract class FeastDay : SmartEnum<FeastDay>
{
	#region Id's
	private static class Id
	{
		internal const int Hanukkah = 1;
		internal const int Purim = 2;
		internal const int Passover = 3;
		internal const int Weeks = 4;
		internal const int Trumpets = 5;
		internal const int YomKippur = 6;
		internal const int Tabernacles = 7;
		internal const int OmerCount = 8;
	}
	#endregion

	#region Declared Public Instances
	public static readonly FeastDay Hanukkah = new HanukkahSE();
	public static readonly FeastDay Purim = new PurimSE();
	public static readonly FeastDay Passover = new PassoverSE();
	public static readonly FeastDay Weeks = new WeeksSE();
	public static readonly FeastDay Trumpets = new TrumpetsSE();
	public static readonly FeastDay YomKippur = new YomKippurSE();
	public static readonly FeastDay Tabernacles = new TabernaclesSE();
	// Note; SE=SmartEnum
	#endregion

	private FeastDay(string name, int value) : base(name, value) { } // Constructor

	#region Extra Fields
	public abstract string Translation { get; }
	public abstract string Transliteration { get; }
	public abstract string Hebrew { get; }
	public abstract string Details { get; }
	public abstract string CalendarTitle { get; }
	public abstract string PlannerTitle { get; }
	public abstract string Icon { get; }
	public abstract string VerseReferenceCard { get; }
	public abstract bool IsHighSabbath { get; }
	public abstract int EndOfWeekAddDays { get; }
	// public abstract string Description { get; } // ToDo: include Details + Transliteration + Hebrew


	public abstract bool HasCalendarDetails { get; }
	public abstract DateTime Date { get; }  // Code generated by KeyDate.tvfDateCodeGen

	// This is a sanity check based on the idea for some feast days you can determine how many days are in between the dates
	// E.g. There's 9 days between Trumpets and Yom Kippur, so if the difference between those dates is off then one of the dates is wrong.
	public abstract int? DaysFromPrevFeast { get; }
	#endregion

	#region Private Instantiation

	private sealed class HanukkahSE : FeastDay
	{
		public HanukkahSE() : base($"{nameof(Id.Hanukkah)}", Id.Hanukkah) { }
		public override string Translation => "Feast of Lights";
		public override string Transliteration => "Hanukkah";
		public override string Hebrew => "חֲנֻכָּה";
		public override string Details => "First day of Hanukkah; Date determined by Rabbinic sources";
		public override string CalendarTitle => nameof(Id.Hanukkah);
		public override string PlannerTitle => $"{nameof(Id.Hanukkah)} Week";
		public override string Icon => "fas fa-hanukiah";
		public override string VerseReferenceCard => "Joh_10_22";
		public override bool IsHighSabbath => false;
		public override int EndOfWeekAddDays => 7;
		public override bool HasCalendarDetails => false;
		public override int? DaysFromPrevFeast => null;  // This is the beginning of the year
		public override DateTime Date => Convert.ToDateTime("2023-12-08"); // Hanukkah
	}

	private sealed class PurimSE : FeastDay
	{
		public PurimSE() : base($"{nameof(Id.Purim)}", Id.Purim) { }
		public override string Translation => "Lots";
		public override string Transliteration => "Purim";
		public override string Hebrew => "פוּרִים";
		public override string Details => "Tradition is to read the book of Esther; date determined by Rabbinic sources";
		public override string CalendarTitle => nameof(Id.Purim);
		public override string PlannerTitle => nameof(Id.Purim);
		public override string Icon => "far fa-square";
		public override string VerseReferenceCard => "Est_9_24_32";
		public override bool IsHighSabbath => false;
		public override int EndOfWeekAddDays => 0;
		public override bool HasCalendarDetails => false;
		public override int? DaysFromPrevFeast => null;  // Hanukkah comes before and it's to fluid to track, so null

		public override DateTime Date => Convert.ToDateTime("2024-03-24"); // Purim
	}

	private sealed class PassoverSE : FeastDay
	{
		public PassoverSE() : base($"{nameof(Id.Passover)}", Id.Passover) { }
		public override string Translation => "Passover";
		public override string Transliteration => "Pesach";
		public override string Hebrew => "פֶּסַח";
		public override string Details => "The Seder Meal is prepared on the 14th of Aviv. As evening starts, the meal is eaten. Also, this becomes the first day of Unleavened bread";
		public override string CalendarTitle => nameof(Id.Passover);
		public override string PlannerTitle => $"{nameof(Id.Passover)} Week";
		public override string Icon => "fas fa-door-open";
		public override string VerseReferenceCard => "Lev_23_04_08";
		public override bool IsHighSabbath => true;
		public override int EndOfWeekAddDays => 7;  // this is 7 not 6 because I'm starting from passover, not 1st day of unleavened bread
		public override bool HasCalendarDetails => true;
		public override int? DaysFromPrevFeast => null;  // Purim comes before and it's to fluid to track, so null
		public override DateTime Date => Convert.ToDateTime("2024-04-22"); // Passover
	}

	private sealed class WeeksSE : FeastDay
	{
		public WeeksSE() : base($"{nameof(Id.Weeks)}", Id.Weeks) { }
		public override string Translation => "Weeks";
		public override string Transliteration => "Shavu'ot";
		public override string Hebrew => "שָׁבוּעוֹת";
		public override string Details => "The hight sabbath begins the evening before; This is also called Pentecost";
		public override string CalendarTitle => nameof(Id.Weeks);
		public override string PlannerTitle => nameof(Id.Weeks);
		public override string Icon => "fab fa-creative-commons-zero";
		public override string VerseReferenceCard => "Lev_23_15_21";
		public override bool IsHighSabbath => true;
		public override int EndOfWeekAddDays => 0;
		public override bool HasCalendarDetails => false;  // this is the only one that isn't true
		public override int? DaysFromPrevFeast => 51;  // Pesach is before and so a hard business rule can be made ... I think ... why isn't it 50?
		public override DateTime Date => Convert.ToDateTime("2024-06-12"); // Weeks
	}
	
	private sealed class TrumpetsSE : FeastDay
	{
		public TrumpetsSE() : base($"{nameof(Id.Trumpets)}", Id.Trumpets) { }
		public override string Translation => "Trumpets";
		public override string Transliteration => "Yom Teruah";
		public override string Hebrew => "יוֹם תְּרוּעָה";
		public override string Details => "A high holy day sabbath";
		public override string CalendarTitle => nameof(Id.Trumpets);
		public override string PlannerTitle => nameof(Id.Trumpets);
		public override string Icon => "fas fa-bullhorn";
		public override string VerseReferenceCard => "Lev_23_23_25";
		public override bool IsHighSabbath => true;
		public override int EndOfWeekAddDays => 0;
		public override bool HasCalendarDetails => true;
		public override int? DaysFromPrevFeast => 113;  // Shavuot / Weeks is before and so a hard business rule can be made ... I think 
		public override DateTime Date => Convert.ToDateTime("2024-10-03"); // Trumpets
	}
	
	private sealed class YomKippurSE : FeastDay
	{
		public YomKippurSE() : base($"{nameof(Id.YomKippur)}", Id.YomKippur) { }
		public override string Translation => "Day of Atonements";
		public override string Transliteration => "Yom Kippur";
		public override string Hebrew => "יוֹם כִּיפּוּר";
		public override string Details => "In the afternoon we have our Yom Kippur service and break the fast after the sun sets";
		public override string CalendarTitle => "Yom Kippur";
		public override string PlannerTitle => CalendarTitle;
		public override string Icon => "fas fa-hands-helping";
		public override string VerseReferenceCard => "Lev_23_26_32";
		public override bool IsHighSabbath => true;
		public override int EndOfWeekAddDays => 0;
		public override bool HasCalendarDetails => true;
		public override int? DaysFromPrevFeast => 9;  // Trumpets is before and so a hard business rule can be made
		public override DateTime Date => Convert.ToDateTime("2024-10-12"); // Yom Kippur
	}
	
	private sealed class TabernaclesSE : FeastDay
	{
		public TabernaclesSE() : base($"{nameof(Id.Tabernacles)}", Id.Tabernacles) { }
		public override string Translation => "Booths"; // Tabernacle is latin and it comes from tavern
		public override string Transliteration => "Sukkot";
		public override string Hebrew => "סֻּכּוֹת";
		public override string Details => "Preparation Day, High Sabbath begins at sunset";
		public override string CalendarTitle => "Sukkot | Day 1";
		public override string PlannerTitle => $"Tabernacle Week";
		public override string Icon => "fas fa-campground";
		public override string VerseReferenceCard => "Lev_23_33_44";
		public override bool IsHighSabbath => true;
		public override int EndOfWeekAddDays => 7;
		public override bool HasCalendarDetails => true;
		public override int? DaysFromPrevFeast => 5;  // Yom Kippur is before and so a hard business rule can be made 
		public override DateTime Date => Convert.ToDateTime("2024-10-17"); // Tabernacles
	}

	#endregion
}
