using Ardalis.SmartEnum;
using System;

namespace LivingMessiah.Web.Features.Calendar.Enums;

public abstract class LunarMonth : SmartEnum<LunarMonth>
{
	internal const string Adar2Suffix = " II";

	#region Id's
	private static class Id
	{
		//ToDo: do I really need these 3 "*PrevGregYr"
		internal const int HeshvanPrevGregYr = 1;
		internal const int KislevPrevGregYr = 2;
		internal const int TevetPrevGregYr = 3;

		internal const int Shevat = 4;
		internal const int Adar = 5;
		internal const int Nissan = 6;
		internal const int Iyar = 7;
		internal const int Sivan = 8;
		internal const int Tammuz = 9;
		internal const int Av = 10;
		internal const int Elul = 11;
		internal const int Tishri = 12;
		internal const int Heshvan = 13;
		internal const int Kislev = 14;
		internal const int Tevet = 15;
		//internal const int Adar2 = 16;
	}
	#endregion

	public static readonly LunarMonth HeshvanPrevGregYr = new HeshvanPrevGregYrMonth();
	public static readonly LunarMonth KislevPrevGregYr = new KislevPrevGregYrMonth();
	public static readonly LunarMonth TevetPrevGregYr = new TevetPrevGregYrMonth();

	public static readonly LunarMonth Nissan = new NissanMonth();
	public static readonly LunarMonth Iyar = new IyarMonth();
	public static readonly LunarMonth Sivan = new SivanMonth();
	public static readonly LunarMonth Tammuz = new TammuzMonth();
	public static readonly LunarMonth Av = new AvMonth();
	public static readonly LunarMonth Elul = new ElulMonth();
	public static readonly LunarMonth Tishri = new TishriMonth();
	public static readonly LunarMonth Shevat = new ShevatMonth();
	public static readonly LunarMonth Adar = new AdarMonth();
	public static readonly LunarMonth Heshvan = new HeshvanMonth();
	public static readonly LunarMonth Kislev = new KislevMonth();
	public static readonly LunarMonth Tevet = new TevetMonth();
	//public static readonly LunarMonth Adar2 = new Adar2Month();

	private LunarMonth(string name, int value) : base(name, value) { }

	//public abstract string Icon { get; }  //"far fa-moon" 

	#region Extra Fields
	public abstract int BabylonianSort { get; }  // From Nisan to Adar II
	public abstract int HebrewSort { get; }  // From Nisan to Adar II
	public abstract string FullName { get; }
	public abstract string Hebrew { get; }
	public abstract string BiblicalName { get; }
	public abstract string BiblicalHebrew { get; }  // http://www.yashanet.com/library/hebrew-days-and-months.html
	public abstract string Description { get; }
	public abstract bool IsPreviousYear { get; }  // ToDo: Do I need this ???
	public abstract DateTime Date { get; } // Code generated by KeyDate.tvfDateCodeGen
	#endregion

	#region Private Instantiation

	private sealed class HeshvanPrevGregYrMonth : LunarMonth
	{
		public HeshvanPrevGregYrMonth() : base($"{nameof(Id.HeshvanPrevGregYr)}", Id.HeshvanPrevGregYr) { }
		public override int BabylonianSort => 0; // 0 because IsPreviousYear == true
		public override int HebrewSort => 0; // 0 because IsPreviousYear == true
		public override string Hebrew => "חשון"; 
		public override string BiblicalName => "Bul"; 
		public override string BiblicalHebrew => "בּוּל";
		public override string FullName => nameof(Id.Heshvan); // + PGY;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}"; 
		public override bool IsPreviousYear => true;
//	public override DateTime Date => Convert.ToDateTime("2023-10-14"); // EnumId: 1; Heshvan | Bul
		public override DateTime Date => Convert.ToDateTime("2024-10-31"); // EnumId: 1; Heshvan | Bul
	}

	private sealed class KislevPrevGregYrMonth : LunarMonth
	{
		public KislevPrevGregYrMonth() : base($"{nameof(Id.KislevPrevGregYr)}", Id.KislevPrevGregYr) { }
		public override int BabylonianSort => 0; // 0 because IsPreviousYear == true
		public override int HebrewSort => 0; // 0 because IsPreviousYear == true
		public override string Hebrew => "כסלו"; 
		public override string BiblicalName => "9th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Kislev); // + PGY;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => true;
//	public override DateTime Date => Convert.ToDateTime("2023-11-12"); // EnumId: 2; Kislev | 9th
		public override DateTime Date => Convert.ToDateTime("2024-11-30"); // EnumId: 2; Kislev | 9th

	}

	private sealed class TevetPrevGregYrMonth : LunarMonth
	{
		public TevetPrevGregYrMonth() : base($"{nameof(Id.TevetPrevGregYr)}", Id.TevetPrevGregYr) { }
		public override int BabylonianSort => 0; // 0 because IsPreviousYear == true
		public override int HebrewSort => 0; // 0 because IsPreviousYear == true
		public override string Hebrew => "טבת"; 
		public override string BiblicalName => "10th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Tevet); // + PGY;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => true;
//	public override DateTime Date => Convert.ToDateTime("2023-12-12"); // EnumId: 3; Tevet | 10th	}
		public override DateTime Date => Convert.ToDateTime("2025-01-01"); // EnumId: 3; Tevet | 10th
	}

	private sealed class ShevatMonth : LunarMonth
	{
		public ShevatMonth() : base($"{nameof(Id.Shevat)}", Id.Shevat) { }
		public override int BabylonianSort => 11;
		public override int HebrewSort => 5; 
		public override string Hebrew => "שבט"; 
		public override string BiblicalName => "11th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Shevat);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-01-10"); // EnumId: 4; Shevat | 11th
		public override DateTime Date => Convert.ToDateTime("2025-01-30"); // EnumId: 4; Shevat | 11th
	}

	private sealed class AdarMonth : LunarMonth
	{
		public AdarMonth() : base($"{nameof(Id.Adar)}", Id.Adar) { }
		public override int BabylonianSort => 12;
		public override int HebrewSort => 6; 
		public override string Hebrew => "אדר א"; 
		public override string BiblicalName => "12th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Adar);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-02-09"); // EnumId: 5; Adar | 12th
		public override DateTime Date => Convert.ToDateTime("2025-03-01"); // EnumId: 5; Adar | 12th
	}

/*
	private sealed class Adar2Month : LunarMonth
	{
		public Adar2Month() : base($"{nameof(Id.Adar2)}", Id.Adar2) { }
		public override int BabylonianSort => 13;
		public override int HebrewSort => 6;  // ToDo: this is a duplicate and a bug waiting to happen
		public override string Hebrew => "אדר ב"; 
		public override string BiblicalName => "13th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Adar) + Adar2Suffix;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
		public override DateTime Date => Convert.ToDateTime("2024-03-09"); // EnumId: 6; Adar II | 13th
	}
*/



	private sealed class NissanMonth : LunarMonth
	{
		public NissanMonth() : base($"{nameof(Id.Nissan)}", Id.Nissan) { }
		public override int BabylonianSort => 1;
		public override int HebrewSort => 7;
		public override string Hebrew => "ניסן"; 
		public override string BiblicalName => "Abib"; 
		public override string BiblicalHebrew => "הָאָבִיב";
		public override string FullName => nameof(Id.Nissan);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
		//public override DateTime Date => Convert.ToDateTime("2024-04-09"); // EnumId: 7; Nissan | Abib
		public override DateTime Date => Convert.ToDateTime("2025-03-30"); // EnumId: 6; Nissan | Abib

	}

	private sealed class IyarMonth : LunarMonth
	{
		public IyarMonth() : base($"{nameof(Id.Iyar)}", Id.Iyar) { }
		public override int BabylonianSort => 2;
		public override int HebrewSort => 8;
		public override string Hebrew => "אייר"; 
		public override string BiblicalName => "Ziv"; 
		public override string BiblicalHebrew => "זִו";
		public override string FullName => nameof(Id.Iyar);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-05-07"); // EnumId: 8; Iyar | Ziv
		public override DateTime Date => Convert.ToDateTime("2025-04-29"); // EnumId: 7; Iyar | Ziv
	}

	private sealed class SivanMonth : LunarMonth
	{
		public SivanMonth() : base($"{nameof(Id.Sivan)}", Id.Sivan) { }
		public override int BabylonianSort => 3;
		public override int HebrewSort => 9;
		public override string Hebrew => "סיון"; 
		public override string BiblicalName => "3rd"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Sivan);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-06-06"); // EnumId: 9; Sivan | 3rd
		public override DateTime Date => Convert.ToDateTime("2025-05-28"); // EnumId: 8; Sivan | 3rd
	}

	private sealed class TammuzMonth : LunarMonth
	{
		public TammuzMonth() : base($"{nameof(Id.Tammuz)}", Id.Tammuz) { }
		public override int BabylonianSort => 4;
		public override int HebrewSort => 10;
		public override string Hebrew => "תמוז"; 
		public override string BiblicalName => "4th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Tammuz);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-07-05"); // EnumId: 10; Tammuz | 4th
		public override DateTime Date => Convert.ToDateTime("2025-06-27"); // EnumId: 9; Tammuz | 4th
	}

	private sealed class AvMonth : LunarMonth
	{
		public AvMonth() : base($"{nameof(Id.Av)}", Id.Av) { }
		public override int BabylonianSort => 5;
		public override int HebrewSort => 11;
		public override string Hebrew => "אב"; 
		public override string BiblicalName => "5th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Av);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-08-04"); // EnumId: 11; Av | 5th
		public override DateTime Date => Convert.ToDateTime("2025-07-26"); // EnumId: 10; Av | 5th
	}

	private sealed class ElulMonth : LunarMonth
	{
		public ElulMonth() : base($"{nameof(Id.Elul)}", Id.Elul) { }
		public override int BabylonianSort => 6;
		public override int HebrewSort => 12;
		public override string Hebrew => "אלול"; 
		public override string BiblicalName => "6th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Elul);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//  public override DateTime Date => Convert.ToDateTime("2024-09-02"); // EnumId: 12; Elul | 6th
		public override DateTime Date => Convert.ToDateTime("2025-08-25"); // EnumId: 11; Elul | 6th

	}

	private sealed class TishriMonth : LunarMonth
	{
		public TishriMonth() : base($"{nameof(Id.Tishri)}", Id.Tishri) { }
		public override int BabylonianSort => 7;
		public override int HebrewSort => 1;
		public override string Hebrew => "תשרי"; 
		public override string BiblicalName => "Ethanim"; 
		public override string BiblicalHebrew => "הָאֵתָנִים";
		public override string FullName => nameof(Id.Tishri);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-10-02"); // EnumId: 13; Tishri | Ethanim
		public override DateTime Date => Convert.ToDateTime("2025-09-23"); // EnumId: 12; Tishri | Ethanim

	}


	// also transliterated as Cheshvan
	private sealed class HeshvanMonth : LunarMonth
	{
		public HeshvanMonth() : base($"{nameof(Id.Heshvan)}", Id.Heshvan) { }
		public override int BabylonianSort => 8;
		public override int HebrewSort => 2;
		public override string Hebrew => "חשון"; 
		public override string BiblicalName => "Bul";
		public override string BiblicalHebrew => "בּוּל";
		public override string FullName => nameof(Id.Heshvan);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-10-31"); // EnumId: 14; Heshvan | Bul
		public override DateTime Date => Convert.ToDateTime("2025-10-23"); // EnumId: 13; Heshvan | Bul
	}

	private sealed class KislevMonth : LunarMonth
	{
		public KislevMonth() : base($"{nameof(Id.Kislev)}", Id.Kislev) { }
		public override int BabylonianSort => 9;
		public override int HebrewSort => 3;
		public override string Hebrew => "כסלו"; 
		public override string BiblicalName => "9th"; 
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Kislev);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-11-30"); // EnumId: 15; Kislev | 9th
		public override DateTime Date => Convert.ToDateTime("2025-11-21"); // EnumId: 14; Kislev | 9th
	}

	private sealed class TevetMonth : LunarMonth
	{
		public TevetMonth() : base($"{nameof(Id.Tevet)}", Id.Tevet) { }
		public override int BabylonianSort => 10;
		public override int HebrewSort => 4;
		public override string Hebrew => "טבת";
		public override string BiblicalName => "10th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Tevet);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override bool IsPreviousYear => false;
//	public override DateTime Date => Convert.ToDateTime("2024-12-29"); // EnumId: 16; Tevet | 10th
		public override DateTime Date => Convert.ToDateTime("2025-12-21"); // EnumId: 15; Tevet | 10th
	}
	#endregion
}

// Ignore Spelling: Nissan, Iyar, Sivan, Tammuz, Av, Elul, Tishri, Shevat, Adar, Heshvan, Kislev, Tevet, Adar2

/*

# This was how to do code generation for the old version of SmartEnum

SELECT 
'public static LunarMonthLocal ' + Month + ' { get; } = new LunarMonthLocal(LunarMonthEnum.' + Month + ', ' + CAST(EnumId AS varchar(30)) + 
', ' + QUOTENAME([Month], CHAR(34)) +
', ' + QUOTENAME(Hebrew, CHAR(34)) +
	', ' + QUOTENAME(BiblicalName, CHAR(34)) +
', ' + QUOTENAME(BiblicalHebrew, CHAR(34)) +
', ' + QUOTENAME('far fa-moon:', CHAR(34))+ ');'	
AS CodeGen
FROM KeyDate.LunarMonth 
WHERE  MONTH NOT LIKE '%(previous)%'
ORDER BY EnumId

--SELECT * 	FROM KeyDate.LunarMonth 

			internal const int Nissan = 1;
			internal const int Iyar = 2;
			internal const int Sivan = 3;
			internal const int Tammuz = 4;
			internal const int Av = 5;
			internal const int Elul = 6;
			internal const int Tishri = 7;
			internal const int HeshvanPrevGregYr = 8;
			internal const int KislevPrevGregYr = 9;
			internal const int TevetPrevGregYr = 10;
			internal const int Shevat = 11;
			internal const int Adar = 12;
			internal const int Heshvan = 13;
			internal const int Kislev = 14;
			internal const int Tevet = 15;
			internal const int Adar2 = 16;

*/
