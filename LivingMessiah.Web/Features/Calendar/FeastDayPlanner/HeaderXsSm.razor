@using FeastDayType = LivingMessiah.Web.Features.Calendar.Enums.FeastDay
@using LivingMessiah.Web.Infrastructure

<div class="d-print-none mb-2">

	<div class="row mt-3  gx-1">
		<div class="col-3 text-center mt-2">

			@if (Prev is not null)
			{
				<button @onclick="@(() => OnClickFilter(Prev))"
								class="btn btn-light btn-lg ">
					<i class="fas fa-chevron-circle-left fa-fw fa-2x"></i>
				</button>
				<p class="mt-1"><small>@Prev.PlannerTitle</small></p>
			}
			else
			{
				<button class="btn btn-light btn-lg disabled">
					<i class="fas fa-chevron-circle-left fa-fw fa-2x"></i>
				</button>
			}
		</div>

		<div class="col-6 text-center">
			<div class="card bg-primary text-white">
				<div class="card-body">
					<h4 class=""><b>@_SelectedFilter!.PlannerTitle</b> </h4>
					<small><span class="badge bg-warning-subtle text-dark fw-bold fs-6">@DaysFrom</span> @DaysFromNow</small>
				</div>
			</div>

		</div>

		<div class="col-3 text-center mt-2">

				@if (Next is not null)
				{
					<button @onclick="@(() => OnClickFilter(Next))"
								class="btn btn-light btn-lg ">
						<i class="fas fa-chevron-circle-right fa-fw fa-2x"></i>
					</button>
					<p class="mt-1"><small>@Next!.PlannerTitle</small></p>
				}
				else
				{
				<button class="btn btn-light btn-lg disabled">
						<i class="fas fa-chevron-circle-right fa-fw fa-2x"></i>
					</button>
				}

			
		</div>
	</div>


</div>

@code {
	[Parameter, EditorRequired] public required FeastDayType? CurrentFilter { get; set; }
	[Parameter, EditorRequired] public EventCallback<FeastDayType> OnFilterSelected { get; set; }

	protected FeastDayType? Prev;
	protected FeastDayType? Next;

	protected void OnClickFilter(FeastDayType filter)
	{
		OnFilterSelected.InvokeAsync(filter);
	}

	private FeastDayType? _SelectedFilter;
	protected override void OnParametersSet()
	{
		_SelectedFilter = CurrentFilter;

		if (_SelectedFilter!.Value != 1) 
		{
			Prev = FeastDayType.FromValue(_SelectedFilter.Value -1);
		}
		else
		{
			Prev = null;
		}

		if (_SelectedFilter!.Value != 7)
		{
			Next = FeastDayType.FromValue(_SelectedFilter.Value + 1);
		}
		else
		{
			Next = null;
		}

		GregorianDate = DateTime.Now.AddDays(Constants.Test.AddDays).ToString(DateFormat.FeastDayPlanner);
		TimeSpan difference = CurrentFilter!.Date.AddDays(Constants.Test.AddDays) - DateTime.UtcNow.AddHours(Utc.ArizonaUtcMinus7);
		DaysFrom = (int)difference.TotalDays;
		DaysFromNow = $" days away";
		HebrewDate = DateUtil.ToTransliteratedHebrewDateString(DateTime.Now.AddDays(Constants.Test.AddDays));
	}

	protected string? GregorianDate;
	protected int DaysFrom = 0;
	protected string? DaysFromNow;
	protected string? HebrewDate;

}
