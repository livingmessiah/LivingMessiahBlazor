@page "/Calendar/HealthCheck"

@using Microsoft.Extensions.Logging;
@using Page = LivingMessiah.Web.Features.Home.Enums.Nav
@using CalendarEnum = LivingMessiah.Web.Features.Calendar.Enums
@using DateType = LivingMessiah.Web.Features.Calendar.Enums.DateType
@using LivingMessiah.Web.Settings
@using Microsoft.Extensions.Options

@inject Data.IRepository? db
@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject IOptions<AppSettings>? AppSettings

<PageTitle>@Page.CalendarHealthCheck.Text</PageTitle>
	<div class="pb-1 mt-4 mb-1 border-bottom border-info">
		<p class="float-end bg-success-subtle p-2">YearId: @YearId</p>
	<h3><i class="@Page.CalendarHealthCheck.Icon"></i> @Page.CalendarHealthCheck.Text</h3>
</div>

<p class="mt-3 mb-3 bg-info-subtle p-2">
	This page is a <i>Health Check</i> of the calendar dates.
	Specifically it makes sure the hard coded <code>DateTime Date</code> members found in
	<code>LivingMessiah.Web.Features.Calendar.Enums</code> folder are consistent.
</p>



<h4 class="mb-1 mt-4  @DateType.FromValue(DateType.Month.Value).TextColor">
	@DateType.FromValue(DateType.Month.Value).Name
</h4>
<TableTemplate Items="DataMonth">
	<TableHeader>
		<th class="text-info">Date</th>
		<th class="text-info">DateLocal</th>
		<th>DIFF</th>
		<th class="text-info">Enum</th>
	</TableHeader>
	<RowTemplate>
		<td>@context.DateYMD</td>
		<td>
			@CalendarEnum.LunarMonth.FromValue(context.EnumId).Date.ToString(DateFormat.YYYY_MM_DD)
		</td>
		<td>
			@GetDateDiff(context.Date, CalendarEnum.LunarMonth.FromValue(context.EnumId).Date)
		</td>
		<td>@context.EnumId - @context.EventDescr</td>

	</RowTemplate>
</TableTemplate>


<h4 class="mb-1 mt-4 @DateType.FromValue(DateType.Feast.Value).TextColor">
	@DateType.FromValue(DateType.Feast.Value).Name
</h4>
<TableTemplate Items="DataFeast">
	<TableHeader>
		<th class="text-info">Date</th>
		<th class="text-info">DateLocal</th>
		<th>DIFF</th>
		<th class="text-info">Enum</th>
	</TableHeader>
	<RowTemplate>
		<td>@context.DateYMD</td>
		<td>
			@CalendarEnum.FeastDay.FromValue(context.EnumId).Date.ToString(DateFormat.YYYY_MM_DD)
		</td>
		<td>
			@GetDateDiff(context.Date, CalendarEnum.FeastDay.FromValue(context.EnumId).Date)
		</td>
		<td>@context.EnumId - @context.EventDescr</td>

	</RowTemplate>
</TableTemplate>


<h4 class="mb-1 mt-4  @DateType.FromValue(DateType.Season.Value).TextColor">
	@DateType.FromValue(DateType.Season.Value).Name
</h4>
<TableTemplate Items="DataSeason">
	<TableHeader>
		<th class="text-info">Date</th>
		<th class="text-info">DateLocal</th>
		<th>DIFF</th>
		<th class="text-info">Enum</th>
	</TableHeader>
	<RowTemplate>
		<td>@context.DateYMD</td>
		<td>
			@CalendarEnum.Season.FromValue(context.EnumId).Date.ToString(DateFormat.YYYY_MM_DD)
		</td>
		<td>
			@GetDateDiff(context.Date, CalendarEnum.Season.FromValue(context.EnumId).Date)
		</td>
		<td>@context.EnumId - @context.EventDescr</td>

	</RowTemplate>
</TableTemplate>


@code {
	private string inside = $"page {Page.CalendarHealthCheck.Index}; class: {nameof(Index)}";

	protected int YearId { get; set; }

	protected List<Data.CalendarQuery>? DataMonth { get; set; } = new List<Data.CalendarQuery>();
	protected List<Data.CalendarQuery>? DataFeast { get; set; } = new List<Data.CalendarQuery>();
	protected List<Data.CalendarQuery>? DataSeason { get; set; } = new List<Data.CalendarQuery>();

	int GetDateDiff(DateTime db, DateTime loc)
	{
		TimeSpan difference = db - loc;
		return (int)difference.TotalDays;
	}

	protected override async Task OnInitializedAsync()
	{
		YearId = AppSettings!.Value.YearId;
		Logger!.LogDebug(string.Format("Inside {0}; {1}; YearId: {2}"
			, inside, nameof(OnInitializedAsync), YearId));
		try
		{
			DataMonth = (await db!.GetCalendarQuery(YearId, DateType.Month.Value)).ToList();
			if (!DataMonth.Any()) { Toast!.ShowWarning($"No {DateType.Month.Name} data gotten!"); }

			DataFeast = (await db!.GetCalendarQuery(YearId, DateType.Feast.Value)).ToList();
			if (!DataFeast.Any()) { Toast!.ShowWarning($"No {DateType.Feast.Name} data gotten!"); }

			DataSeason = (await db!.GetCalendarQuery(YearId, DateType.Season.Value)).ToList();
			if (!DataSeason.Any()) { Toast!.ShowWarning($"No {DateType.Season.Name} data gotten!"); }
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, string.Format("Inside catch of {0}", inside + "!" + nameof(OnInitializedAsync)));
			Toast!.ShowError($"{Global.ToastShowError}; inside: {inside}!{nameof(OnInitializedAsync)}");
		}

	}

	/*
	private async Task Populate()
		{
		try
			{
			Data = await db!.GetQuery(SelectedYear);
			if (Data.Any())
				{
				StateHasChanged();
				Toast!.ShowInfo($"Data updated for {SelectedYear}");
			}
			else
				{
				Toast!.ShowWarning($"No data gotten! Year={SelectedYear}");
		}
		}
		catch (Exception ex)
			{
			Logger!.LogError(ex, string.Format("...Inside catch of {0}; year={1}"
			, inside + "!" + nameof(Populate)), SelectedYear);  // , year
			Toast!.ShowError($"{Global.ToastShowError}; inside: {inside}!{nameof(OnInitializedAsync)}");
	}
	}
		*/


}
